{"version":3,"sources":["img/SW.png","Components/UI/CharacterListItem/CharacterListItem.js","Components/UI/Loading/Loading.js","Components/Pages/Characters/Characters.js","Components/UI/MovieListItem/MovieListItem.js","Components/Pages/Movies/SingleMovie/SingleMovie.js","Components/Pages/Movies/Movies.js","Components/Pages/Home/Home.js","Components/UI/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CharacterListItem","props","character","className","name","birth_year","weight","height","gender","Loading","useState","dots","setDots","setInterval","length","Characters","state","data","loading","axios","get","then","response","newdata","results","map","c","newState","Object","assign","setState","localStorage","setItem","JSON","stringify","catch","error","console","log","retrievedObject","getItem","parse","this","fetchData","id","singleCharacter","index","key","React","Component","MovieListItem","singleMovie","episodeId","title","releaseDate","onClick","triggerState","SingleMovie","movie","episode_id","release_date","director","producer","opening_crawl","Movies","context","bind","Home","Navbar","to","src","StarWarsLogo","alt","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d326066.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SW.739e58c0.png\";","import React from 'react'\n\nconst CharacterListItem = (props) => {\n\tconst { character } = props\n\treturn <div className=\"characterListItem\">\n\t\t<h2>{ character.name }</h2>\n\t\t<table className=\"character-data\" ><tbody>\n\t\t\t<tr><td className=\"bold\">Born</td><td>{ character.birth_year }</td></tr>\n\t\t\t<tr><td className=\"bold\">Weight</td><td>{ character.weight }</td></tr>\n\t\t\t<tr><td className=\"bold\">Height</td><td>{ character.height }</td></tr>\n\t\t\t<tr><td className=\"bold\">Gender</td><td>{ character.gender }</td></tr>\n\t\t</tbody></table>\n\t</div>\n}\n\nexport default CharacterListItem\n","import React, { useState } from 'react'\nimport './loading.scss'\n\nconst Loading = (props) => {\n\tconst [dots, setDots] = useState('')\n\tsetInterval(() => {\n\t\tif (dots.length < 3) {\n\t\t\tsetDots(dots + '.')\n\t\t} else {\n\t\t\tsetDots('')\n\t\t}\n\t}, 600)\n\n\treturn <p>Loading { dots }</p>\n}\n\nexport default Loading\n","import React from 'react'\nimport './chars.scss'\nimport axios from \"axios\";\nimport CharacterListItem from '../../UI/CharacterListItem/CharacterListItem'\nimport Loading from '../../UI/Loading/Loading'\n\nclass Characters  extends React.Component {\n\n\t// default State object\n\tstate = {\n\t\tdata: [],\n\t\tloading: false\n\t};\n\n\tfetchData(){\n\t\taxios\n\t\t.get(\"https://swapi.co/api/people\")\n\t\t.then(response => {\n\t\t\t// create an array of data only with relevant data\n\t\t\tconst newdata = response.data.results.map(c => {\n\t\t\treturn c;\n\t\t\t});\n\n\t\t\t// create a new \"State\" object without mutating\n\t\t\t// the original State object.\n\t\t\tconst newState = Object.assign({}, this.state, {\n\t\t\tdata: newdata,\n\t\t\t});\n\t\t\t// store the new state object in the component's state\n\t\t\tthis.setState(newState);\n\n\t\t\t// add data to local storage\n\t\t\tlocalStorage.setItem('Characters', JSON.stringify(response.data.results));\n\t\t})\n\t\t.catch(error => console.log(error));\n\t\t};\n\n\tcomponentDidMount() {\n\n\t\t// getting data from local storage\n\t\tvar retrievedObject = localStorage.getItem('Characters');\n\t\tretrievedObject = JSON.parse(retrievedObject)\n\n\t\tif(retrievedObject){\n\t\t\tconsole.log('Character data fetched from local storage');\n\t\t\tconst newState = Object.assign({}, this.state, {\n\t\t\t\tdata: retrievedObject\n\t\t\t\t});\n\t\t\tthis.setState(newState);\n\t\t}\n\t\telse {\n\t\t\tconsole.log('Character data fetched from api');\n\t\t\tthis.fetchData();\n\t\t}\n\t}\n\trender() {\n\t\treturn <div className=\"page\" id=\"characters\">\n\t\t<h1>Characters</h1>\n\t\t{this.state.data.length < 1 && <Loading />}\n\t\t<div className=\"characterList\">\n\t\t\t{ this.state.data.map((singleCharacter, index) => <CharacterListItem\n\t\t\t\tkey={ index }\n\t\t\t\tcharacter={ singleCharacter }\n\t\t\t/>) }\n\t\t</div>\n\t</div>\n\t}\n}\n\nexport default Characters\n","import React from 'react'\n\nconst MovieListItem = (props) => {\n\n\tconst {\n\t\tsingleMovie,\n\t\tepisodeId,\n\t\ttitle,\n\t\treleaseDate\n\t} = props\n\n\t// open popup.\n\tconst openMovieInfo = function(){\n\t\tprops.triggerState(singleMovie);\n\t}\n\n\treturn <div className=\"movieListItem\" onClick={openMovieInfo}>\n\t\t<h4>Espiode { episodeId }</h4>\n\t\t<h2>{ title }</h2>\n\t\t<p>Released { releaseDate }</p>\n\t</div>\n}\n\nexport default MovieListItem\n","import React from 'react'\n\nconst SingleMovie = (props) => {\n\tconst { movie } = props\n\n\t// pass on the click ID of this particular movie\n\tconst triggerState = function(){\n\t\tprops.triggerState();\n\t}\n\n\treturn <div className=\"singleMovie\">\n\n\t\t<h1>Single Movie</h1>\n\t\t<h1>{ movie.title }</h1>\n\t\t<p>Episode { movie.episode_id }, released { movie.release_date }.</p>\n\t\t<p><strong>Director:</strong> { movie.director }.</p>\n\t\t<p><strong>Producer(s):</strong> { movie.producer }</p>\n\n\t\t<p>{ movie.opening_crawl }</p>\n\n\t\t<button onClick={triggerState}>Back</button>\n\t</div>\n}\n\nexport default SingleMovie\n","import React from 'react'\nimport './movies.scss'\nimport MovieListItem from '../../UI/MovieListItem/MovieListItem'\nimport SingleMovie from './SingleMovie/SingleMovie'\nimport Loading from '../../UI/Loading/Loading'\nimport axios from \"axios\";\n\nclass Movies extends React.Component {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.triggerState = this.triggerState.bind(this)\n\t\tthis.state = {\n\t\t\tdata: [],\n\t\t\tloading: false,\n\t\t\tsingleMovie: []\n\t\t  };\n\t}\n\n\tfetchData(){\n\t\taxios\n\t\t.get(\"https://swapi.co/api/films\")\n\t\t.then(response => {\n\t\t\t// create an array of data only with relevant data\n\t\t\tconst newdata = response.data.results.map(c => {\n\t\t\t\treturn c;\n\t\t\t});\n\n\t\t\t// create a new \"State\" object without mutating\n\t\t\t// the original State object.\n\t\t\tconst newState = Object.assign({}, this.state, {\n\t\t\t\tdata: newdata,\n\t\t\t});\n\t\t\t// store the new state object in the component's state\n\t\t\tthis.setState(newState);\n\n\t\t\t// add data to local storage\n\t\t\tlocalStorage.setItem('Movies', JSON.stringify(response.data.results));\n\t\t})\n\t\t.catch(error => console.log(error));\n\t};\n\n\t// update state with info on the clicked movie\n\ttriggerState(singleMovie){\n\t\tif(singleMovie) {\n\t\t\tthis.setState({\n\t\t\t\tsingleMovie,\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.setState({\n\t\t\t\tsingleMovie: []\n\t\t\t});\n\t\t}\n\n\t};\n\n\tcomponentDidMount() {\n\n\t\t// getting data from local storage\n\t\tvar retrievedObject = localStorage.getItem('Movies');\n\t\tretrievedObject = JSON.parse(retrievedObject)\n\n\t\tif(retrievedObject){\n\t\t\tconsole.log('Movie data fetched from local storage');\n\t\t\tconst newState = Object.assign({}, this.state, {\n\t\t\t\tdata: retrievedObject\n\t\t\t\t});\n\t\t\tthis.setState(newState);\n\t\t}\n\t\telse {\n\t\t\tconsole.log('Movie data fetched from api');\n\t\t\tthis.fetchData();\n\t\t}\n\t}\n\n\trender() {\n\t  return (<div className=\"page\" id=\"movies\">\n\t\t<h1>Movies</h1>\n\t\t{this.state.data.length < 1 && <Loading />}\n\n\n\t\t<div className=\"movieList\">\n\t\t\t{ this.state.data.map((singleMovie, index) => <MovieListItem\n\t\t\t\tkey={ index }\n\t\t\t\ttriggerState = { this.triggerState }\n\t\t\t\tsingleMovie = { singleMovie }\n\t\t\t\tepisodeId={ singleMovie.episode_id }\n\t\t\t\ttitle={ singleMovie.title }\n\t\t\t\treleaseDate={ singleMovie.release_date }\n\t\t\t/>)\n\t\t\t}\n\t\t</div>\n\n\t\t{\n\t\tthis.state.singleMovie.title &&\n\t\t<div className=\"singleMovie\">\n\t\t\t<SingleMovie movie = { this.state.singleMovie } triggerState = { this.triggerState }/>\n\t\t</div>\n\t\t}\n\n\t</div>\n\t  );\n\t}\n  }\n\n  export default Movies;\n","import React from 'react'\nimport './home.scss'\n\nconst Home= (props) => {\n\treturn <div className=\"page\" id=\"home\">\n\t\t<h1>Home</h1>\n\t</div>\n}\n\nexport default Home\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Characters from '../../Pages/Characters/Characters'\nimport Movies from '../../Pages/Movies/Movies'\nimport Home from '../../Pages/Home/Home'\nimport './navbar.scss'\nimport StarWarsLogo from '../../../img/SW.png'\n\nconst Navbar = (props) => {\n\treturn <Router>\n\t\t<nav className=\"navbar\">\n\t\t\t<div className=\"navbar-links\">\n\t\t\t\t<div className=\"nav-left\">\n\t\t\t\t\t<button className=\"home\">\n\t\t\t\t\t\t<Link to=\"/\">\n\t\t\t\t\t\t\t<img src={ StarWarsLogo } className=\"logo\" alt=\"logo\" />\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"nav-right\">\n\t\t\t\t\t<button className=\"navigate\">\n\t\t\t\t\t\t<Link to=\"/Movies\">\n\t\t\t\t\t\t\tMovies\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"navigate\">\n\t\t\t\t\t\t<Link to=\"/Characters\">\n\t\t\t\t\t\t\tCharacters\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<Switch>\n\n\t\t\t\t<Route exact path=\"/\" component={Home}/>\n\n\t\t\t\t<Route path=\"/Movies\" component={Movies}/>\n\n\t\t\t\t<Route path=\"/Characters\" component={Characters}/>\n\n        \t</Switch>\n\n\t\t</nav>\n\n\n\t</Router>\n}\n\nexport default Navbar\n","import React from 'react'\nimport Navbar from './Components/UI/Navbar/Navbar'\nimport './base.scss'\n\nfunction App() {\n\treturn <div className=\"app\">\n\t\t\t<Navbar />\n\t</div>\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\twindow.location.hostname === '[::1]' ||\n\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${ process.env.PUBLIC_URL }/service-worker.js`\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config)\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.')\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error)\n\t\t})\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type')\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.')\n\t\t})\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister()\n\t\t})\n\t}\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nserviceWorker.unregister()\n"],"sourceRoot":""}